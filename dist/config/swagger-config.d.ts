import { SwaggerOptions } from '../interfaces/swagger-options.interface';
import { Config } from './config';
export declare class SwaggerConfig extends Config<SwaggerOptions> implements SwaggerOptions {
    private _resolve;
    private readonly _onComplete;
    readonly onCompletePromise: Promise<void>;
    private readonly _authorizeBtnSelector;
    private readonly _authorizeDoneBtnSelector;
    private readonly _authorizeModalCloseBtnSelector;
    private readonly _authorizeModalSelector;
    private readonly _modalOverlaySelector;
    private readonly _operationSectionContainerSelector;
    private readonly _operationContainerSelector;
    private readonly _operationSummaryPatternSelector;
    private readonly _wrapperSelector;
    readonly dom_id: string;
    readonly url: string;
    readonly tryItOutEnabled: boolean;
    readonly authModalClass: string;
    readonly hideClass: string;
    readonly showClass: string;
    readonly selectedOperationContainerClass: string;
    readonly version: string;
    constructor(options: SwaggerOptions, url: string, tryItOutEnabled: boolean);
    get id(): string;
    get boxSelector(): string;
    get authorizeBtnSelector(): string;
    get authorizeDoneBtnSelector(): string;
    get authorizeModalCloseBtnSelector(): string;
    get authorizeModalSelector(): string;
    get openModalOverlaySelector(): string;
    get operationSectionContainerSelector(): string;
    get operationContainerSelector(): string;
    get operationSummaryPatternSelector(): string;
    get wrapperSelector(): string;
    get openAuthorizeModalSelector(): string;
    get hiddenSelector(): string;
    get shownSelector(): string;
    get shownAuthModalSelector(): string;
    get bundleUrl(): string;
    get cssUrl(): string;
    onComplete: () => void;
}
